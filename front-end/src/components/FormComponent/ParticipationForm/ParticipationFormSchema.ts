import { z } from "zod";

export const ParticipationFormSchema = z.object({
  firstName: z.string().min(1, "First Name is required").trim(),
  middleName: z.string().optional(),
  lastName: z.string().min(1, "Last Name is required").trim(),
  preferredName: z.string().optional(),
  studentId: z.string().min(1, "Student ID is required").trim(),
  gradeLevel: z.enum(["7th grade", "8th grade", "Freshman", "Sophomore", "Junior", "Senior"], {
    required_error: "Grade Level is required",
  }),
  gender: z.enum(["Male", "Female", "Other", "NonBinary", "Prefer not to say"], {
    required_error: "Gender is required",
  }),
  numberOfParents: z.enum(["One", "Two", "Other"], {
    required_error: "Number of Parents is required",
  }),
  studentPhone: z.string().min(1, "Student Phone Number is required").trim(),
  studentEmail: z.string().email("Invalid email address").min(1, "Student Email is required").trim(),
  street: z.string().min(1, "Street is required").trim(),
  city: z.string().min(1, "City is required").trim(),
  state: z.string().min(1, "State is required").trim(),
  zipcode: z.string().min(1, "Zip Code is required").trim(),
  race: z.enum([
    "American Indian/Alaskan Native",
    "Asian",
    "White",
    "Black/African American",
    "Hispanic/Latino",
    "Other",
  ], {
    required_error: "Race is required",
  }),
  language: z.enum([
    "English",
    "Mandarin Chinese",
    "Hindi",
    "Spanish",
    "French",
    "Modern Standard Arabic",
    "Bengali",
    "Russian",
    "Portuguese",
    "Urdu",
    "Indonesian",
    "German",
    "Japanese",
    "Nigerian Pidgin",
    "Marathi",
    "Telugu",
    "Turkish",
    "Tamil",
    "Yue Chinese",
    "Vietnamese",
    "Tagalog",
    "Wu Chinese",
    "Korean",
    "Iranian Persian(Farsi)",
    "Hausa",
    "Egyptian Spoken Arabic",
    "Swahili",
    "Javanese",
    "Italian",
    "Western Punjabi",
    "Kannada",
    "Gujarati",
    "Thai",
    "Other",
  ], {
    required_error: "Language is required",
  }),
  proficiency: z.enum(["Proficient", "Moderate", "Poor"], {
    required_error: "Proficiency in the primary language is required",
  }),
  secondaryLanguage: z.enum([
    "English",
    "Mandarin Chinese",
    "Hindi",
    "Spanish",
    "French",
    "Modern Standard Arabic",
    "Bengali",
    "Russian",
    "Portuguese",
    "Urdu",
    "Indonesian",
    "German",
    "Japanese",
    "Nigerian Pidgin",
    "Marathi",
    "Telugu",
    "Turkish",
    "Tamil",
    "Yue Chinese",
    "Vietnamese",
    "Tagalog",
    "Wu Chinese",
    "Korean",
    "Iranian Persian(Farsi)",
    "Hausa",
    "Egyptian Spoken Arabic",
    "Swahili",
    "Javanese",
    "Italian",
    "Western Punjabi",
    "Kannada",
    "Gujarati",
    "Thai",
    "Other",
  ]).optional(),
  proficiencyInSecondaryLanguage: z.enum(["Proficient", "Moderate", "Poor"]).optional(),
  thirdLanguage: z.enum([
    "English",
    "Mandarin Chinese",
    "Hindi",
    "Spanish",
    "French",
    "Modern Standard Arabic",
    "Bengali",
    "Russian",
    "Portuguese",
    "Urdu",
    "Indonesian",
    "German",
    "Japanese",
    "Nigerian Pidgin",
    "Marathi",
    "Telugu",
    "Turkish",
    "Tamil",
    "Yue Chinese",
    "Vietnamese",
    "Tagalog",
    "Wu Chinese",
    "Korean",
    "Iranian Persian(Farsi)",
    "Hausa",
    "Egyptian Spoken Arabic",
    "Swahili",
    "Javanese",
    "Italian",
    "Western Punjabi",
    "Kannada",
    "Gujarati",
    "Thai",
    "Other",
  ]).optional(),
  primaryParentFirstName: z.string().min(1, "Primary Parent First Name is required").trim(),
  primaryParentMiddleName: z.string().optional(),
  primaryParentLastName: z.string().min(1, "Primary Parent Last Name is required").trim(),
  primaryParentRelationship: z.enum(["Mother", "Father", "Grandparent", "Aunt/Uncle", "Foster Parent", "Other"], {
    required_error: "Primary Parent's Relationship to the Student is required",
  }),
  primaryParentBirthDate: z.string().min(1, "Primary Parent Birth Date is required").trim(),
  primaryParentStreet: z.string().min(1, "Street (Primary Parent) is required").trim(),
  primaryParentCity: z.string().min(1, "City (Primary Parent) is required").trim(),
  primaryParentState: z.string().min(1, "State (Primary Parent) is required").trim(),
  primaryParentZipCode: z.string().min(1, "Zip Code (Primary Parent) is required").trim(),
  primaryParentPhoneNumber: z.string().min(1, "Primary Parent Phone Number is required").trim(),
  primaryParentEmail: z.string().email("Invalid email address").min(1, "Primary Parent Email is required").trim(),
  primaryParentEnglishProficiency: z.enum(["Poor", "Moderate", "Proficient"], {
    required_error: "Primary Parent English Proficiency is required",
  }),
  primaryParentEducation: z.enum(["No High School Diploma", "High School Diploma", "Associate", "College Degree"], {
    required_error: "Primary Parent Education is required",
  }),
  primaryParentEmploymentStatus: z.enum(["Full Time", "Part Time", "Unemployed"], {
    required_error: "Primary Parent Employment Status is required",
  }),
  secondaryParentFirstName: z.string().optional(),
  secondaryParentMiddleName: z.string().optional(),
  secondaryParentLastName: z.string().optional(),
  secondaryParentRelationship: z.enum(["Mother", "Father", "Grandparent", "Aunt/Uncle", "Foster Parent", "Other"], {
    required_error: "Secondary Parent's Relationship to the Student is required",
  }).optional(),
  secondaryParentBirthDate: z.string().optional(),
  secondaryParentStreet: z.string().optional(),
  secondaryParentCity: z.string().optional(),
  secondaryParentState: z.string().optional(),
  secondaryParentZipCode: z.string().optional(),
  secondaryParentPhoneNumber: z.string().optional(),
  secondaryParentEmail: z.string().email("Invalid email address").optional(),
  secondaryParentEnglishProficiency: z.enum(["Poor", "Moderate", "Proficient"]).optional(),
  secondaryParentEducation: z.enum(["No High School Diploma", "High School Diploma", "Associate", "College Degree"]).optional(),
  secondaryParentEmploymentStatus: z.enum(["Full Time", "Part Time", "Unemployed"]).optional(),
  emergencyContactName: z.string().min(1, "Emergency Contact Name is required").trim(),
  emergencyContactPhoneNumber: z.string().min(1, "Emergency Contact Phone Number is required").trim(),
  schoolLunch: z.enum(["Full Pay", "Free/Reduced"], {
    required_error: "School Lunch is required",
  }),
  disability: z.enum(["Yes", "No"], {
    required_error: "Disability status is required",
  }),
  IEP_IFSP: z.enum(["Yes", "No"], {
    required_error: "IEP/IFSP status is required",
  }),
  specificDisability: z.string().optional(),
  concerns: z.enum([
    "None",
    "Hearing",
    "Vision",
    "Obesity",
    "Allergies",
    "Asthma",
    "Dental",
    "Other",
  ]).optional(),
  otherConcerns: z.string().optional(),
  medicalProblem: z.string().optional(),
  developmentConcern: z.string().optional(),
  speechIssue: z.string().optional(),
  physicalDevelopment: z.string().optional(),
});

export type ParticipationFormData = z.infer<typeof ParticipationFormSchema>;
